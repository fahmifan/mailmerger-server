// Code generated by MockGen. DO NOT EDIT.
// Source: mail.go

// Package mock_mailmerger is a generated GoMock package.
package mock_mailmerger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailTransporter is a mock of MailTransporter interface.
type MockMailTransporter struct {
	ctrl     *gomock.Controller
	recorder *MockMailTransporterMockRecorder
}

// MockMailTransporterMockRecorder is the mock recorder for MockMailTransporter.
type MockMailTransporterMockRecorder struct {
	mock *MockMailTransporter
}

// NewMockMailTransporter creates a new mock instance.
func NewMockMailTransporter(ctrl *gomock.Controller) *MockMailTransporter {
	mock := &MockMailTransporter{ctrl: ctrl}
	mock.recorder = &MockMailTransporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailTransporter) EXPECT() *MockMailTransporterMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailTransporter) Send(ctx context.Context, subject, from, to string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, subject, from, to, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailTransporterMockRecorder) Send(ctx, subject, from, to, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailTransporter)(nil).Send), ctx, subject, from, to, body)
}
